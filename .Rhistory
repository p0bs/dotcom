color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 3)
girafe(code = print(p1), width_svg = 8, height_svg = 4)
View(batOrder)
library(tidyverse)
library(gganimate)
library(glue)
library(plotly)
theme_set(theme_bw())
batOrder <- read_csv("data/BattingOrder.csv") %>%
mutate(
Name = word(Player, start = 1L, end = -2L),
fullCountry = word(Player, -1),
Country = str_sub(fullCountry, 2,-2)) %>%
filter(
Country %in% c("Aus", "Ban", "Eng", "India", "NZ", "Pak", "SA", "SL", "WI")
) %>%
mutate(
Start = as.integer(str_sub(Span, 1, 4)),
Decade = 10*trunc(Start/10),
Name = str_replace_all(Name, "'", " ")
) %>%
select(Name, Country, Start, Decade, Ave, Innings = Inns, Runs, Bat)
head(batOrder)
batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave,
color = Country,
size = Innings
)
) +
geom_point(alpha = 1) +
labs(
x = "Last decade of the batsman's career",
y = ""
) +
ggtitle(
'The 200 best players who have ever batted at {closest_state} in the order',
subtitle = 'Average when batting at that position'
) +
transition_states(
states = Bat,
transition_length = 2,
state_length = 1
) +
ease_aes('cubic-in-out')
install.packages("gifski")
batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave,
color = Country,
size = Innings
)
) +
geom_point(alpha = 1) +
labs(
x = "Last decade of the batsman's career",
y = ""
) +
ggtitle(
'The 200 best players who have ever batted at {closest_state} in the order',
subtitle = 'Average when batting at that position'
) +
transition_states(
states = Bat,
transition_length = 2,
state_length = 1
) +
ease_aes('cubic-in-out')
library(ggiraph)
library(htmlwidgets)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 3)
girafe(code = print(p1), width_svg = 8, height_svg = 4)
library(ggiraph)
library(htmlwidgets)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 3) +
theme(
strip.text = element_text(size = 6)
)
girafe(code = print(p1), width_svg = 8, height_svg = 4)
library(ggiraph)
library(htmlwidgets)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 3) +
theme(
strip.text = element_text(
size = 6,
face = "bold"
)
)
girafe(code = print(p1), width_svg = 8, height_svg = 4)
library(ggiraph)
library(htmlwidgets)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
geom_smooth(method = 'auto') +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 3) +
theme(
strip.text = element_text(
size = 6,
face = "bold"
)
)
girafe(code = print(p1), width_svg = 8, height_svg = 4)
library(ggiraph)
library(htmlwidgets)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
geom_smooth(method = 'auto') +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 3) +
theme(
strip.text = element_text(
size = 6,
face = "bold"
)
)
girafe(code = print(p1))
girafe(code = print(p1), width_svg = 7, height_svg = 5)
girafe(code = print(p1), width_svg = 5, height_svg = 5)
girafe(code = print(p1), width_svg = 4, height_svg = 5)
girafe(code = print(p1), width_svg = 9, height_svg = 5)
suppressMessages(library(tidyverse))
library(gganimate)
library(ggiraph)
library(glue)
library(htmlwidgets)
theme_set(theme_bw())
batOrder <- read_csv("data/BattingOrder.csv") %>%
mutate(
Name = word(Player, start = 1L, end = -2L),
fullCountry = word(Player, -1),
Country = str_sub(fullCountry, 2,-2)) %>%
filter(
Country %in% c("Aus", "Ban", "Eng", "India", "NZ", "Pak", "SA", "SL", "WI")
) %>%
mutate(
Start = as.integer(str_sub(Span, 1, 4)),
Decade = 10*trunc(Start/10),
Name = str_replace_all(Name, "'", " ")
) %>%
select(Name, Country, Start, Decade, Ave, Innings = Inns, Runs, Bat)
head(batOrder)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
geom_smooth(method = 'auto') +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 2) +
theme(
strip.text = element_text(
size = 6,
face = "bold"
)
)
girafe(
code = print(p1),
width_svg = 9,
height_svg = 15
)
girafe(
code = print(p1),
width_svg = 5,
height_svg = 7
)
girafe(
code = print(p1),
width_svg = 4,
height_svg = 7
)
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point_interactive(
aes(
tooltip = Name,
color = Country,
size = Innings
)
) + labs(
x = "\n Last decade of the batsman's career",
y = ""
) +
geom_smooth(method = 'auto') +
ggtitle(
'Best players batting at this position',
subtitle = 'Average when batting at this position'
) +
facet_wrap(~ Bat, ncol = 2) +
theme(
strip.text = element_text(
size = 6,
face = "bold"
)
)
girafe(
code = print(p1),
width_svg = 4,
height_svg = 7
)
girafe(
code = print(p1),
width_svg = 3,
height_svg = 8
)
install.packages(c("ggridges", "googlesheets"))
library(premPredictor)
player_data <- get_player_data("https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv")
odds_for_final_game <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
get_latest_standings(data_input = player_data)
library(premPredictor)
player_data <- get_player_data("https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv")
odds_for_final_game <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
get_latest_standings(data_input = player_data)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE,
runs = 1000,
seed = 26)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE,
runs = 1000,
seed = 26)
library(premPredictor)
player_data <- get_player_data("https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv")
odds_for_final_game <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
get_latest_standings(data_input = player_data)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE,
runs = 1000,
seed = 26)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE,
runs = 1000,
seed = 26)
library(premPredictor)
player_data <- get_player_data("https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv")
odds_for_final_game <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
get_latest_standings(data_input = player_data)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE,
runs = 1000,
seed = 26)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE)
library(premPredictor)
player_data <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
odds_for_final_game <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
get_latest_standings(data_input = player_data)
player_data <- get_player_data(url_value = player_info)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
odds_for_final_game <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
player_data <- get_player_data(url_value = player_info)
get_latest_standings(data_input = player_data)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_data,
project_players = TRUE)
get_projection(
url_odds = odds_for_final_game,
url_predictions = player_info,
project_players = TRUE)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/odds.csv"
odds <- get_odds_data(odds_info)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds <- get_odds_data(url_value = odds_info)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds <- get_odds_data(url_value = odds_info)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data)
get_projection(
url_odds = odds_data,
url_predictions = player_info,
project_players = TRUE)
get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE)
library(premPredictor)
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data)
get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE)
get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE)
suppressMessages(library(tidyverse))
project_team <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE)
suppressMessages(library(tidyverse))
project_team %>%
select(Liverpool, `Man City`) %>%
count()
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`)
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`) %>%
mutate(chance = n / sum(n))
project_team <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE)
suppressMessages(library(tidyverse))
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`) %>%
mutate(chance = n / sum(n))
project_team <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE)
suppressMessages(library(tidyverse))
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`) %>%
mutate(chance = n / sum(n))
library(premPredictor)
suppressMessages(library(tidyverse))
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data)
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE)
project_players %>%
dplyr::filter(Frequency > 0) %>%
dplyr::arrange(-Frequency) %>%
dplyr::mutate(Likelihood = Frequency/iterations) %>%
dplyr::select(Name, Likelihood) %>%
tibble::as_tibble(.)
