config(displayModeBar = F,
displaylogo = F,
showLink = F,
p = p1)
layout(p1, hovermode = "closest")
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave,
text = Name,
color = Country
)
) +
geom_point() +
facet_wrap(~ Bat) +
labs(
x = "",
title = "",
y = ""
) +
theme(legend.position="none")
config(displayModeBar = F,
displaylogo = F,
showLink = F,
p = p1)
layout(ggplotly(p1), hovermode = "closest")
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave,
text = Name,
color = Country
)
) +
geom_point() +
facet_wrap(~ Bat) +
labs(
x = "",
title = "",
y = ""
) +
theme(legend.position="none")
# config(displayModeBar = F,
#        displaylogo = F,
#        showLink = F,
#        p = p1)
#
p1 <- ggplotly(p1)
layout(p1, hovermode = "closest")
blogdown:::serve_site()
p1 <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave
)
) +
geom_point(
aes(
text = Name,
color = Country
)
) +
facet_wrap(~ Bat, ncol = 3) +
geom_smooth(
method = 'auto'
) +
labs(
x = "",
y = "",
title = ""
) +
theme(legend.position="none")
p1 <- ggplotly(p1)
layout(p1, hovermode = "closest")
library(tidyverse)
library(gganimate)
library(glue)
library(plotly)
theme_set(theme_bw())
batOrder <- read_csv("data/BattingOrder.csv") %>%
mutate(
Name = word(Player, start = 1L, end = -2L),
fullCountry = word(Player, -1),
Country = str_sub(fullCountry, 2,-2)) %>%
filter(
Country %in% c("Aus", "Ban", "Eng", "India", "NZ", "Pak", "SA", "SL", "WI")
) %>%
mutate(
Start = as.integer(str_sub(Span, 1, 4)),
Decade = 10*trunc(Start/10)
) %>%
select(Name, Country, Start, Decade, Ave, Innings = Inns, Runs, Bat)
head(batOrder)
batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave,
color = Country,
size = Innings
)
) +
geom_point(alpha = 1) +
geom_smooth(method = 'auto') +
labs(
x = "Last decade of the batsman's career",
y = ""
) +
ggtitle(
'The 200 best players who have ever batted at {closest_state} in the order',
subtitle = 'Average when batting at that position'
) +
transition_states(
states = Bat,
transition_length = 2,
state_length = 1
) +
ease_aes('cubic-in-out')
a <- batOrder %>%
ggplot(
aes(
x = Decade,
y = Ave,
color = Country,
size = Innings
)
) +
geom_point(alpha = 1) +
geom_smooth(method = 'auto') +
labs(
x = "Last decade of the batsman's career",
y = ""
) +
ggtitle(
'The 200 best players who have ever batted at {closest_state} in the order',
subtitle = 'Average when batting at that position'
) +
transition_states(
states = Bat,
transition_length = 2,
state_length = 1
) +
ease_aes('cubic-in-out')
anim_save("output1.gif")
anim_save(filename = "output1.gif", animation = a)
library(tidyverse)
library(airportr)
library(crosstalk)
library(DT)
library(leaflet)
library(rvest)
library(tidyverse)
library(xml2)
temp_max <- 270
time_max <- 7200
index_page_LHR <- 'https://www.flightsfrom.com/LHR/destinations'
index_page_LGW <- 'https://www.flightsfrom.com/LGW/destinations'
airports_LHR <- read_html(index_page_LHR) %>%
html_nodes(".airport-content-destination-list-name") %>%
html_text() %>%
str_trim()
times_LHR <- read_html(index_page_LHR) %>%
html_nodes(".airport-content-destination-list-time") %>%
html_text() %>%
str_trim()
airports_LGW <- read_html(index_page_LGW) %>%
html_nodes(".airport-content-destination-list-name") %>%
html_text() %>%
str_trim()
times_LGW <- read_html(index_page_LGW) %>%
html_nodes(".airport-content-destination-list-time") %>%
html_text() %>%
str_trim()
data <- bind_rows(
tibble(airports = airports_LHR, times = times_LHR, home = 'LHR'),
tibble(airports = airports_LGW, times = times_LGW, home = 'LGW')
) %>%
arrange(home) %>%
group_by(airports) %>%
slice(1) %>%
ungroup() %>%
arrange(airports) %>%
rowwise() %>%
mutate(
code = str_extract(airports, '[[:upper:]][[:upper:]][[:upper:]]'),
position = str_locate_all(airports, '[[:upper:]][[:upper:]][[:upper:]]')
) %>%
separate(col = times, into = c('split', 'detail'), sep = ": ") %>%
separate(col = detail, into = c('hours', 'mins'), sep = "h ") %>%
rowwise() %>%
mutate(
mins = as.integer(str_sub(mins, start = 1L, end = -2L)),
hours = as.integer(hours),
minutes = (60 * hours) + mins,
position1 = position[[1]] - 2,
position2 = position[[2]] + 2,
city = str_trim(str_to_lower(str_sub(string = airports, start = 1L, end = position1))),
country = str_trim(str_to_lower(str_sub(string = airports, start = position2, end = -1L))))
write_rds(x = data, path = "data/data_hols.rds")
airport_data <- airportr::airports
output <- data[, c('code', 'city', 'home', 'country', 'minutes')] %>%
left_join(airport_data, by = c('code' = 'IATA')) %>%
filter(!is.na(ICAO)) %>%
rowwise() %>%
mutate(
distance = airport_distance(home, code),
City = str_to_lower(City)
)
temp_data <- read_html('https://en.m.wikipedia.org/wiki/List_of_cities_by_average_temperature') %>%
html_nodes("table") %>%
html_table(header = TRUE) %>%
bind_rows() %>%
select(-Year, -Ref.) %>%
mutate_at(vars(-Country, -City), str_remove, '\\s*\\([^\\)]+\\)') %>%
mutate_at(vars(-Country, -City), as.numeric) %>%
mutate(
City = str_to_lower(City),
Country = str_to_lower(Country)) %>%
arrange(City)
write_rds(x = temp_data, path = "data/data_temp.rds")
temp_data <- read_rds("data/data_temp.rds")
blogdown:::serve_site()
library(airportr)
library(crosstalk)
library(DT)
library(htmlwidgets)
library(leaflet)
library(rvest)
library(tidyverse)
library(xml2)
temp_max <- 270
time_max <- 7200
index_page_LHR <- 'https://www.flightsfrom.com/LHR/destinations'
index_page_LGW <- 'https://www.flightsfrom.com/LGW/destinations'
# airports_LHR <- read_html(index_page_LHR) %>%
#   html_nodes(".airport-content-destination-list-name") %>%
#   html_text() %>%
#   str_trim()
# times_LHR <- read_html(index_page_LHR) %>%
#   html_nodes(".airport-content-destination-list-time") %>%
#   html_text() %>%
#   str_trim()
# airports_LGW <- read_html(index_page_LGW) %>%
#   html_nodes(".airport-content-destination-list-name") %>%
#   html_text() %>%
#   str_trim()
# times_LGW <- read_html(index_page_LGW) %>%
#   html_nodes(".airport-content-destination-list-time") %>%
#   html_text() %>%
#   str_trim()
# data <- bind_rows(
#   tibble(airports = airports_LHR, times = times_LHR, home = 'LHR'),
#   tibble(airports = airports_LGW, times = times_LGW, home = 'LGW')
# ) %>%
#   arrange(home) %>%
#   group_by(airports) %>%
#   slice(1) %>%
#   ungroup() %>%
#   arrange(airports) %>%
#   rowwise() %>%
#   mutate(
#     code = str_extract(airports, '[[:upper:]][[:upper:]][[:upper:]]'),
#     position = str_locate_all(airports, '[[:upper:]][[:upper:]][[:upper:]]')
#     ) %>%
#   separate(col = times, into = c('split', 'detail'), sep = ": ") %>%
#   separate(col = detail, into = c('hours', 'mins'), sep = "h ") %>%
#   rowwise() %>%
#   mutate(
#     mins = as.integer(str_sub(mins, start = 1L, end = -2L)),
#     hours = as.integer(hours),
#     minutes = (60 * hours) + mins,
#     position1 = position[[1]] - 2,
#     position2 = position[[2]] + 2,
#     city = str_trim(str_to_lower(str_sub(string = airports, start = 1L, end = position1))),
#     country = str_trim(str_to_lower(str_sub(string = airports, start = position2, end = -1L))))
# write_rds(x = data, path = "data/data_hols.rds")
data <- read_rds("data/data_hols.rds")
airport_data <- airportr::airports
output <- data[, c('code', 'city', 'home', 'country', 'minutes')] %>%
left_join(airport_data, by = c('code' = 'IATA')) %>%
filter(!is.na(ICAO)) %>%
rowwise() %>%
mutate(
distance = airport_distance(home, code),
City = str_to_lower(City)
)
# temp_data <- read_html('https://en.m.wikipedia.org/wiki/List_of_cities_by_average_temperature') %>%
#   html_nodes("table") %>%
#   html_table(header = TRUE) %>%
#   bind_rows() %>%
#   select(-Year, -Ref.) %>%
#   mutate_at(vars(-Country, -City), str_remove, '\\s*\\([^\\)]+\\)') %>%
#   mutate_at(vars(-Country, -City), as.numeric) %>%
#   mutate(
#     City = str_to_lower(City),
#     Country = str_to_lower(Country)) %>%
#   arrange(City)
# write_rds(x = temp_data, path = "data/data_temp.rds")
temp_data <- read_rds("data/data_temp.rds")
overall <- output %>%
left_join(temp_data, by = c('City' = 'City')) %>%
select(code, City, Country.x, minutes, ICAO, Latitude, Longitude, UTC, distance, Aug) %>%
filter(
!is.na(Aug),
minutes <= time_max,
Aug <= temp_max
) %>%
arrange(code) %>%
group_by(Country.x, City) %>%
slice(1) %>%
ungroup() %>%
arrange(City)
pal <- colorNumeric(
palette = "Reds",
domain = overall$Aug)
sd <- SharedData$new(overall)
bscols(
filter_slider("temp", "Temperature", sd, column=~Aug, step=0.1, width=250),
filter_slider("duration", "Time", sd, column=~minutes, step=0.1, width=250)
)
leaflet(sd) %>%
addTiles() %>%
setView(
lng = 15,
lat = 10,
zoom = 2) %>%
addCircles(
lng = ~Longitude,
lat = ~Latitude,
weight = 2,
radius = ~sqrt(minutes) * 10000,
popup = ~paste(City, "- time: ", round(minutes/60, 1), "hrs; temp: ", Aug, "C"),
color = ~pal(Aug)
)
datatable(
sd,
extensions="Scroller",
style="bootstrap",
class="compact",
width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE)
)
blogdown:::serve_site()
library(airportr)
library(crosstalk)
library(DT)
library(leaflet)
library(rvest)
library(tidyverse)
library(widgetframe)
library(xml2)
temp_max <- 270
time_max <- 7200
index_page_LHR <- 'https://www.flightsfrom.com/LHR/destinations'
index_page_LGW <- 'https://www.flightsfrom.com/LGW/destinations'
# airports_LHR <- read_html(index_page_LHR) %>%
#   html_nodes(".airport-content-destination-list-name") %>%
#   html_text() %>%
#   str_trim()
# times_LHR <- read_html(index_page_LHR) %>%
#   html_nodes(".airport-content-destination-list-time") %>%
#   html_text() %>%
#   str_trim()
# airports_LGW <- read_html(index_page_LGW) %>%
#   html_nodes(".airport-content-destination-list-name") %>%
#   html_text() %>%
#   str_trim()
# times_LGW <- read_html(index_page_LGW) %>%
#   html_nodes(".airport-content-destination-list-time") %>%
#   html_text() %>%
#   str_trim()
# data <- bind_rows(
#   tibble(airports = airports_LHR, times = times_LHR, home = 'LHR'),
#   tibble(airports = airports_LGW, times = times_LGW, home = 'LGW')
# ) %>%
#   arrange(home) %>%
#   group_by(airports) %>%
#   slice(1) %>%
#   ungroup() %>%
#   arrange(airports) %>%
#   rowwise() %>%
#   mutate(
#     code = str_extract(airports, '[[:upper:]][[:upper:]][[:upper:]]'),
#     position = str_locate_all(airports, '[[:upper:]][[:upper:]][[:upper:]]')
#     ) %>%
#   separate(col = times, into = c('split', 'detail'), sep = ": ") %>%
#   separate(col = detail, into = c('hours', 'mins'), sep = "h ") %>%
#   rowwise() %>%
#   mutate(
#     mins = as.integer(str_sub(mins, start = 1L, end = -2L)),
#     hours = as.integer(hours),
#     minutes = (60 * hours) + mins,
#     position1 = position[[1]] - 2,
#     position2 = position[[2]] + 2,
#     city = str_trim(str_to_lower(str_sub(string = airports, start = 1L, end = position1))),
#     country = str_trim(str_to_lower(str_sub(string = airports, start = position2, end = -1L))))
# write_rds(x = data, path = "data/data_hols.rds")
data <- read_rds("data/data_hols.rds")
airport_data <- airportr::airports
output <- data[, c('code', 'city', 'home', 'country', 'minutes')] %>%
left_join(airport_data, by = c('code' = 'IATA')) %>%
filter(!is.na(ICAO)) %>%
rowwise() %>%
mutate(
distance = airport_distance(home, code),
City = str_to_lower(City)
)
# temp_data <- read_html('https://en.m.wikipedia.org/wiki/List_of_cities_by_average_temperature') %>%
#   html_nodes("table") %>%
#   html_table(header = TRUE) %>%
#   bind_rows() %>%
#   select(-Year, -Ref.) %>%
#   mutate_at(vars(-Country, -City), str_remove, '\\s*\\([^\\)]+\\)') %>%
#   mutate_at(vars(-Country, -City), as.numeric) %>%
#   mutate(
#     City = str_to_lower(City),
#     Country = str_to_lower(Country)) %>%
#   arrange(City)
# write_rds(x = temp_data, path = "data/data_temp.rds")
temp_data <- read_rds("data/data_temp.rds")
overall <- output %>%
left_join(temp_data, by = c('City' = 'City')) %>%
select(code, City, Country.x, minutes, ICAO, Latitude, Longitude, UTC, distance, Aug) %>%
filter(
!is.na(Aug),
minutes <= time_max,
Aug <= temp_max
) %>%
arrange(code) %>%
group_by(Country.x, City) %>%
slice(1) %>%
ungroup() %>%
arrange(City)
pal <- colorNumeric(
palette = "Reds",
domain = overall$Aug)
map_widget <- leaflet(overall) %>%
addTiles() %>%
setView(
lng = 0,
lat = 20,
zoom = 1.5) %>%
addCircles(
lng = ~Longitude,
lat = ~Latitude,
weight = 2,
radius = ~sqrt(minutes) * 10000,
popup = ~paste(City, "- time: ", round(minutes/60, 1), "hrs; temp: ", Aug, "C"),
color = ~pal(Aug)
)
frameWidget(map_widget, width = '100%', height = 250)
View(overall)
install.packages(c("dplyr", "forcats", "gganimate", "ggthemes", "haven", "igraph", "modelr", "readxl", "sf", "tidygraph"))
blogdown:::serve_site()
blogdown:::serve_site()
add <- function(x){function(y) x+y}
adders <- lapply(1:10, add)
adders[[1]](10)
View(adders)
rm(adders)
rm(add())
rm(add)
premPredictor::get_latest_standings()
premPredictor::get_latest_standings(premPredictor::get_player_data(url_value = "https://www.abcdef.com/abcdefg123.csv"))
library(premPredictor)
player_data <- get_player_data("https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv")
get_latest_standings(data_input = player_data)
?ls
install.packages(c("cricketr", "forecast", "future", "gganimate"))
devtools::install_github("abresler/fundManageR")
install.packages("XBRL")
devtools::install_github("abresler/fundManageR")
install.packages(c("anytime", "furrr"))
devtools::install_github("abresler/fundManageR")
install.packages("countrycode")
devtools::install_github("abresler/fundManageR")
install.packages("formattable")
devtools::install_github("abresler/fundManageR")
install.packages("hrbrthemes")
devtools::install_github("abresler/fundManageR")
install.packages("janitor")
devtools::install_github("abresler/fundManageR")
install.packages("listviewer")
devtools::install_github("abresler/fundManageR")
install.packages("rio")
devtools::install_github("abresler/fundManageR")
install.packages("tabulizer")
devtools::install_github("abresler/fundManageR")
install.packages("rJava")
devtools::install_github("abresler/fundManageR")
install.packages("tabulizerjars")
devtools::install_github("abresler/fundManageR")
remove.packages("rJava")
install.packages("rJava")
devtools::install_github("abresler/fundManageR")
install.packages("tis")
devtools::install_github("abresler/fundManageR")
install.packages("tidytext")
devtools::install_github("abresler/fundManageR")
library(premPredictor)
X <- premPredictor::get_player_data("https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv")
View(X)
premPredictor::get_latest_standings(data_input = X)
install.packages("blogdown")
install.packages("gganimate")
install.packages("plotly")
install.packages("widgetframe")
install.packages("leaflet")
install.packages("maptools")
