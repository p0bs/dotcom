(5 * Affordability) +
(10 * IMD.score)) * -1) %>%
select(id, score) %>%
mutate(score = scale(score)) %>%
left_join(geography, by = c("id" = "lsoa11cd")) %>%
mutate_at(.vars = "score", funs(as.numeric))
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_map(aes(x = 695043.73, y = 5679921.05)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_hline(aes(695043.73)) +
geom_vline(aes(5679921.05)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_hline(aes(yintercept = 695043.73)) +
geom_vline(aes(xintercept = 5679921.05)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_hline(aes(yintercept = 695043.73)) + coord_equal() +
geom_vline(aes(xintercept = 5679921.05)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_hline(aes(yintercept = 695043.73)) + coord_sf() +
geom_vline(aes(xintercept = 5679921.05)) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_hline(aes(yintercept = 695043.73)) +
geom_vline(aes(xintercept = 5679921.05)) +
+ coord_sf() +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
geom_hline(aes(yintercept = 695043.73)) +
geom_vline(aes(xintercept = 5679921.05)) +
coord_sf() +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
coord_sf(datum=st_crs(4326)) +
theme_minimal()
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
annotate("point",
x = 5679921.05,
y = 695043.73,
colour = "red",
size = 4) +
coord_sf() +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
annotate("point",
x = 695043.73,
y = 5679921.05,
colour = "red",
size = 0.2) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
annotate("point",
x = 679921.05,
y = 695043.73,
colour = "red",
size = 0.2) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis")
ggplot(data = finalData) +
geom_sf(aes(fill = score, colour = score)) +
scale_fill_continuous(type = "viridis") +
scale_colour_continuous(type = "viridis") +
annotate("point",
x = 520000,
y = 160000,
colour = "red",
size = 0.2) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(tidyverse)
# Start by running this dimmed code (as PP-thin.R):
library(rvest)
library(xml2)
leagueTable <- read_html("http://www.theguardian.com/football/premierleague/table")
clubOrder <- leagueTable %>%
html_nodes(".table--striped") %>%
.[[1]] %>%
html_table()
saveRDS(clubOrder, "data/clubOrder-270118.rds") # + date
clubOrder <- readRDS("data/clubOrder-270118.rds")  # Add date
blogdown:::serve_site()
install.packages(c("blogdown", "bookdown", "DT", "ggraph", "pillar", "rmapzen", "tibble", "tidygraph", "tidyr"))
install.packages(c("blogdown", "bookdown", "DT", "ggraph", "pillar", "rmapzen", "tibble", "tidygraph", "tidyr"))
install.packages("plumber")
X <- 1:10
install.packages("blogdown")
install.packages("bookdown")
library(rvest)
library(xml2)
leagueTable <- read_html("http://www.theguardian.com/football/premierleague/table")
clubOrder <- leagueTable %>%
html_nodes(".table--striped") %>%
.[[1]] %>%
html_table()
saveRDS(clubOrder, "data/clubOrder-180429.rds")
library(tidyverse)
library(htmlwidgets)
library(widgetframe)
library(DT)
# Start by running this dimmed code (as PP-thin.R):
# library(rvest)
# library(xml2)
# leagueTable <- read_html("http://www.theguardian.com/football/premierleague/table")
# clubOrder <- leagueTable %>%
#   html_nodes(".table--striped") %>%
#   .[[1]] %>%
#   html_table()
# saveRDS(clubOrder, "data/clubOrder-180429.rds") # + date
clubOrder <- readRDS("data/clubOrder-180429.rds")
install.packages("widgetframe")
library(tidyverse)
library(htmlwidgets)
library(widgetframe)
library(DT)
# Start by running this dimmed code (as PP-thin.R):
# library(rvest)
# library(xml2)
# leagueTable <- read_html("http://www.theguardian.com/football/premierleague/table")
# clubOrder <- leagueTable %>%
#   html_nodes(".table--striped") %>%
#   .[[1]] %>%
#   html_table()
# saveRDS(clubOrder, "data/clubOrder-180429.rds") # + date
clubOrder <- readRDS("data/clubOrder-180429.rds")
library(tidyverse)
library(htmlwidgets)
library(widgetframe)
library(DT)
# Start by running this dimmed code (as PP-thin.R):
# library(rvest)
# library(xml2)
# leagueTable <- read_html("http://www.theguardian.com/football/premierleague/table")
# clubOrder <- leagueTable %>%
#   html_nodes(".table--striped") %>%
#   .[[1]] %>%
#   html_table()
# saveRDS(clubOrder, "data/clubOrder-180429.rds") # + date
clubOrder <- readRDS("data/clubOrder-180429.rds")  # Add date
# Make the league table consistent with our inputs
clubOrder$Team <- recode(
clubOrder$Team,
`AFC Bournemouth` = "Bournemouth",
`C Palace` = "Crystal Palace",
Spurs = "Tottenham")
clubsABC <- sort(clubOrder$Team)
dataInput <- read_csv("data/PP-2018.csv")
clubStandings <- match(dataInput$Club, clubOrder$Team, 0)
topClub <- match(1, clubStandings, 0)
predictions <- dataInput[,-1]
bonus <- -50*(predictions[topClub,]==1)
ssq <- function(x){(x-clubStandings)^2}
squares <- apply(predictions,2,ssq)
Impact <- c(clubsABC, "Bonus")
bonusSquare <- rbind(squares, bonus)
bonusSquares <- cbind(Impact, bonusSquare) %>%
as_data_frame() %>%
gather(key = "Player", -Impact, value = "Loss")
bonusSquares$Loss <- as.integer(bonusSquares$Loss)
score <- colSums(squares) + bonus
names <- colnames(score)
names1 <- str_replace_all(names, "_", " ")
worst <- apply(squares,2,max)
findWorst <- function(y){match(worst[y],squares[,y],0)}
worstClubNo <- sapply(1:ncol(predictions),findWorst)
worstClub <- clubsABC[worstClubNo]
output <- rbind(score, bonus, worst, worstClubNo)
output1 <- data.frame(names1,t(output))
row.names(output1) <- NULL
output2 <- output1 %>%
mutate(worstClub=clubsABC[worstClubNo]) %>%
select(-worstClubNo)
colnames(output2) <- c("Names", "Scores", "Bonus", "WorstCost", "WorstClub")
report <- output2 %>%
arrange(Scores) %>%
select(Names, Scores, Bonus, WorstClub, WorstCost) %>% unite(WorstChoice, WorstClub, WorstCost, sep = ": ")
dtReport <- datatable(
report,
rownames = FALSE,
options = list(
dom = 't',
pageLength = 23,
order = list(
list(1, 'asc'),
list(0, 'asc')),
columnDefs = list(
list(
className = 'dt-left',
targets = c(0)
),
list(
className = 'dt-right',
targets = c(1, 2, 3)
)
)
)
)
frameWidget(dtReport, width = '100%', height = 800)
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("devtools")
devtools::install_github("r-spatial/sf")
install.packages("plotly")
install.packages("leaflet")
install.packages("maptools")
install.packages("rgeos")
install.packages("sf")
devtools::install_github("tidyverse/ggplot2")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
devtools::install_github("tidyverse/ggplot2")
library(tidyverse)
library(sf)
geography <- sf::st_read(
"data/Lower_Layer_Super_Output_Areas_December_2011_Super_Generalised_Clipped__Boundaries_in_England_and_Wales.dbf")
# setwd("~/GitHub/p0bs.github.io/")
suppressMessages(library(tidyverse))
library(DT)
library(magrittr)
library(lazyeval)
library(widgetframe)
clubOrder <- readRDS("data/clubOrder-180511.rds") %>%
as_data_frame(.)
clubOrder$Team <- recode(clubOrder$Team,
`AFC Bournemouth` = "Bournemouth",
`C Palace` = "Crystal Palace",
Spurs = "Tottenham")
clubsABC <- sort(clubOrder$Team)
dataInput <- read_csv("data/PP-2018.csv")
clubStandings <- match(dataInput$Club, clubOrder$Team, 0)
topClub <- match(1, clubStandings, 0)
predictions <- dataInput[,-1]
bonus <- -50*(predictions[topClub,]==1)
ssq <- function(x){(x-clubStandings)^2}
squares <- apply(predictions,2,ssq)
score <- colSums(squares) + bonus
names <- colnames(score)
names1 <- str_replace_all(names, "_", " ")
worst <- apply(squares,2,max)
findWorst <- function(y){match(worst[y],squares[,y],0)}
worstClubNo <- sapply(1:ncol(predictions),findWorst)
worstClub <- clubsABC[worstClubNo]
output <- rbind(score, bonus, worst, worstClubNo)
output1 <- data.frame(names1,t(output))
row.names(output1) <- NULL
output2 <- output1 %>%
mutate(worstClub=clubsABC[worstClubNo]) %>%
select(-worstClubNo)
colnames(output2) <- c("Names", "Scores", "Bonus", "WorstCost", "WorstClub")
report <- output2 %>%
arrange(Scores) %>%
select(Names, Scores, Bonus, WorstClub, WorstCost)
dtReport <- datatable(report,
rownames = FALSE,
options = list(dom = 't',
pageLength = 23,
order = list(list(1, 'asc'), list(0, 'asc'))))
frameWidget(dtReport, width = '100%', height = 800)
Position <- as.vector(1:20)
clubsOrder <- clubOrder$Team
clubsOrder1 <- as.data.frame(cbind(clubsOrder, Position)) %>%
rename(Club = clubsOrder) %>%
left_join(dataInput, by = "Club")
dtClubsOrder1 <- datatable(clubsOrder1,
rownames = FALSE,
options = list(dom = 't',
pageLength = 20,
order = list(1, 'asc'),
columnDefs = list(list(
className = 'dt-right', targets = 1))))
frameWidget(dtClubsOrder1, width = '100%', height = 800)
# Change code as shown below if champion has yet to be decided
iterations <- 10000
set.seed(6)
clubOrder %<>%
mutate(fullPts = (1000*Pts) + GD)
clubsABC <- clubOrder %>%
select(Team, fullPts) %>%
arrange(Team)
clubStandings <- match(dataInput$Club, clubOrder$Team, 0)
predictions <- dataInput[,-1]
nPlayers <- ncol(predictions)
ssq <- function(x){sum((x-clubStandings)^2)}
score <- as_data_frame(apply(predictions,2,ssq))
names <- as_data_frame(rownames(score))
names1 <- as_data_frame(str_replace_all(t(names), "_", " "))
bookiesInput <- data_frame(
game = c("Burnley-Bournemouth", "Crystal Palace-West Brom", "Huddersfield-Arsenal", "Liverpool-Brighton", "Man Utd-Watford", "Newcastle-Chelsea", "Southampton-Man City", "Swansea-Stoke", "Tottenham-Leicester", "West Ham-Everton"),
homeValue = c(2.15, 1.75, 5.5, 1.18, 1.36, 6, 7, 1.87, 1.3, 2.35),
drawValue = c(3.4, 3.75, 4.25, 7, 5, 4, 4.6, 3.7, 5.5, 3.4),
awayValue = c(3.4, 4.6, 1.57, 13, 9, 1.57, 1.44, 3.9, 9.5, 3))
oddsData <- bookiesInput %>%
separate(col = game,
into = c("homeTeam", "awayTeam"),
sep = "-",
remove = FALSE)
gameOddsBuilder <- oddsData %>%
rowwise() %>%
mutate(overround = (1/homeValue) + (1/drawValue) + (1/awayValue),
homeLikelihood = 1/(homeValue * overround),
drawLikelihood = 1/(drawValue * overround),
awayLikelihood = 1/(awayValue * overround),
winSlice = homeLikelihood,
drawSlice = homeLikelihood + drawLikelihood)
vectorRandom <- as_vector(
ceiling(
runif(
10*iterations,
min = 0,
max = 7)
)
)
netGameGoals <- matrix(data = vectorRandom, ncol = 10)
colnames(netGameGoals) <- paste0("n", 1:10)
unitVectorRandom <- as.vector(runif(10*iterations, min = 0, max = 1))
randomGameValues <- matrix(data = unitVectorRandom, ncol = 10)
colnames(randomGameValues) <- paste0("r", 1:10)
simulatedCalcs <- data_frame(
iteration = seq.int(iterations)) %>%
cbind(randomGameValues, netGameGoals)
pointsAdjuster <- function(team) {
teamName <- enquo(team)
matchNo <- teamData$matchNo[teamData$team == uq(teamName)]
isHomeTeam <- teamData$isHomeTeam[teamData$team == uq(teamName)]
existingPoints <- clubsABC$fullPts[clubsABC == uq(teamName)]
winBreakpoint <- teamData$winSlice[teamData$team == uq(teamName)]
drawBreakpoint <- teamData$drawSlice[teamData$team == uq(teamName)]
workings <- tibble(
firstColumn = simulatedCalcs[, (matchNo + 1)],
secondColumn = simulatedCalcs[, (matchNo + 11)])
existingPoints + if (isHomeTeam == TRUE) {
workings %>%
rowwise() %>%
mutate(
newPoints = ifelse(
firstColumn < winBreakpoint,
3000 + secondColumn,
ifelse(
firstColumn < drawBreakpoint,
1000,
-secondColumn)
)
) %>%
pull(newPoints)
} else {
workings %>%
rowwise() %>%
mutate(
newPoints = ifelse(
firstColumn < winBreakpoint,
-secondColumn,
ifelse(
firstColumn < drawBreakpoint,
1000,
3000 + secondColumn)
)
) %>%
pull(newPoints)
}
}
homeTeamData <- gameOddsBuilder %>%
rownames_to_column(var = "matchNo") %>%
rename(
team = homeTeam,
otherTeam = awayTeam) %>%
select(team, otherTeam, game, matchNo, homeValue:drawSlice) %>%
mutate(
isHomeTeam = TRUE,
matchNo = as.integer(matchNo))
awayTeamData <- gameOddsBuilder %>%
rownames_to_column(var = "matchNo") %>%
rename(
team = awayTeam,
otherTeam = homeTeam) %>%
select(team, otherTeam, game, matchNo, homeValue:drawSlice) %>%
mutate(
isHomeTeam = FALSE,
matchNo = as.integer(matchNo))
teamData <- bind_rows(homeTeamData, awayTeamData) %>%
arrange(matchNo, desc(isHomeTeam))
adjustedPoints <- clubsABC$Team %>%
map(pointsAdjuster) %>%
as.data.frame()
colnames(adjustedPoints) <- clubsABC$Team
simClubOrderString <- as.integer(apply(-adjustedPoints, 1, rank, ties.method="average"))
tsimClubOrder <- matrix(simClubOrderString, nrow = 20)
simClubOrder <- as.data.frame(t(tsimClubOrder))
colnames(simClubOrder) <- clubsABC$Team
simPlayerScores <- matrix(rep(0L, nPlayers*iterations), nrow = iterations)
tPredictions <- t(predictions)
for (i in 1:nPlayers){
mPredictions <- matrix(
rep(tPredictions[i,], iterations),
nrow = iterations,
byrow = TRUE)
workingMisses <- (simClubOrder - mPredictions)^2
bonusScore <- -50 * (tPredictions[i,4] == 1)   # Change if champion isn't certain
simPlayerScores[,i] <- rowSums(workingMisses) + bonusScore
}
colnames(simPlayerScores) <- t(names1)
simPlayerRanks <- data.frame(
t(
apply(simPlayerScores, 1, rank, ties.method='min')
)
)
winPlayer <- as.data.frame(simPlayerRanks==1L)
winLikelihood <- as.data.frame(
apply(winPlayer, 2, sum)
)
colnames(winLikelihood)[1] <- "Frequency"
colnames(names1)[1] <- "Name"
winSummary <- cbind(names1, winLikelihood) %>%
filter(Frequency > 0) %>%
arrange(-Frequency) %>%
mutate(Likelihood = Frequency/iterations) %>%
select(Name, Likelihood) %>%
as_tibble(.)
dtWinSummary <- datatable(winSummary,
rownames = FALSE,
options = list(dom = 't',
pageLength = 20,
order = list(1, 'desc'),
columnDefs = list(list(
className = 'dt-left', targets = 0),list(
className = 'dt-right', targets = 1)))) %>%
formatPercentage('Likelihood', 1)
frameWidget(dtWinSummary, width = '100%', height = 800)
