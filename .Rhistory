dplyr::mutate(Likelihood = Frequency/iterations) %>%
dplyr::select(Name, Likelihood) %>%
tibble::as_tibble(.)
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE,
runs = iterations)
winPlayer <- as.data.frame(project_players==1L)
winLikelihood <- as.data.frame(
apply(winPlayer, 2, sum)
)
tibble(
Name = colnames(project_players),
Frequency = pull(winLikelihood, 1)) %>%
filter(Frequency > 0) %>%
arrange(-Frequency) %>%
mutate(Likelihood = Frequency/iterations) %>%
select(Name, Likelihood)
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE,
runs = iterations)
winPlayer <- as.data.frame(project_players==1L)
winLikelihood <- as.data.frame(
apply(winPlayer, 2, sum)
)
winSummary <- tibble(
Name = colnames(project_players),
Frequency = pull(winLikelihood, 1)) %>%
filter(Frequency > 0) %>%
arrange(-Frequency) %>%
mutate(Likelihood = Frequency/iterations) %>%
select(Name, Likelihood)
winSummary
project_team <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE,
runs = iterations)
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`) %>%
mutate(chance = n / sum(n))
combined <- bind_cols(winPlayer, project_team)
combined <- bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool)
combined <- bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(.)
combined <- bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool)
View(combined)
combined <- bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(Roger.Gathercole, `Man.City`)
combined <- bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(Roger.Gathercole, `Man City`)
bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(Roger.Gathercole, `Man City`)
bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(desc(chance))
bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(`Man City`, desc(chance))
library(premPredictor)
suppressMessages(library(tidyverse))
iterations <- 10000
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data)
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE,
runs = iterations)
winPlayer <- as.data.frame(project_players==1L)
winLikelihood <- as.data.frame(
apply(winPlayer, 2, sum)
)
winSummary <- tibble(
Name = colnames(project_players),
Frequency = pull(winLikelihood, 1)) %>%
filter(Frequency > 0) %>%
arrange(-Frequency) %>%
mutate(Likelihood = Frequency/iterations) %>%
select(Name, Likelihood)
winSummary
project_team <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE,
runs = iterations)
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`) %>%
mutate(chance = n / sum(n)) %>%
arrange(desc(chance))
bind_cols(winPlayer, project_team) %>%
select(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger.Gathercole, Luke.Finnis, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(`Man City`, desc(chance))
install.packages(c("blogdown", "tsibble"))
install.packages(c("blogdown", "tsibble"))
install.packages(c("blogdown", "tsibble"))
install.packages(c("bookdown", "dplyr", "DT", "knitr", "pillar", "progress", "reprex", "rvest", "tinytex", "xfun"))
install.packages(c("bookdown", "dplyr", "DT", "knitr", "pillar", "progress", "reprex", "rvest", "tinytex", "xfun"))
library(FinCal)
library(glue)
library(httr)
library(lubridate)
library(quantmod)
library(rtweet)
library(rvest)
suppressPackageStartupMessages(library(tidyverse))
months_total <- 300
months_gone <- ((year(Sys.Date()) - 2007) * 12) + month(Sys.Date()) - 1
months_left <- months_total - months_gone
rate <- 0.0496/12
payment <- pmt(r = rate, n = months_total, fv = 0, pv = 320000, type = 0)
remaining <- pv(r = rate, n = months_left, fv = 0, pmt = payment, type = 0)
redemption <- 0.03 * remaining
# H estimate ----
Zoopla <- read_html("http://www.zoopla.co.uk/house-prices/wonersh/phillips-hatch/?q=wonersh%20phillips%20hatch%206&yr=9845856")
data <- Zoopla %>%
html_nodes(".browse-estimate-value") %>%
html_text() %>%
stringr::str_trim()
value_house <-  word(data, 1)[1] %>%
str_sub(2, -2) %>%
str_replace(",", "") %>%
as.numeric()
Zoopla1 <- read_html("https://www.zoopla.co.uk/house-prices/cranleigh/waverleigh-road/?q=10%20Waverleigh%20Road%2C%20Cranleigh%20GU6&yr=9852441")
data1 <- Zoopla1 %>%
html_nodes(".browse-estimate-value") %>%
html_text() %>%
stringr::str_trim()
comparitor <-  word(data1, 1)[1] %>%
str_sub(2, -2) %>%
str_replace(",", "") %>%
as.numeric()/1000
# Overall calculations ----
cost_sell <- 0.02
cost_buy <- 0.05
excess_estimate <- (0.98 * value_house) - remaining - redemption
cash_assets <- 31000
total_gross <- excess_estimate + cash_assets
total_net <- total_gross / (1 + cost_sell + cost_buy)
display <- round(total_net/1000)
library(premPredictor)
suppressMessages(library(tidyverse))
iterations <- 10000
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'data/201819_penultimate.rds')
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'portfolio/data/201819_penultimate.rds')
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'content/portfolio/data/201819_penultimate.rds')
library(premPredictor)
suppressMessages(library(tidyverse))
iterations <- 10000
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'content/portfolio/data/201819_penultimate.rds')
library(premPredictor)
suppressMessages(library(tidyverse))
iterations <- 10000
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'data/201819_penultimate.rds')
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE,
runs = iterations)
library(premPredictor)
suppressMessages(library(tidyverse))
iterations <- 10000
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'data/201819_penultimate.rds')
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE,
use_saved_data = T,
data_file = "data/201819_penultimate.rds",
runs = iterations)
winPlayer <- as.data.frame(project_players==1L)
winLikelihood <- as.data.frame(
apply(winPlayer, 2, sum)
)
winSummary <- tibble(
Name = colnames(project_players),
Frequency = pull(winLikelihood, 1)) %>%
filter(Frequency > 0) %>%
arrange(-Frequency) %>%
mutate(Likelihood = Frequency/iterations) %>%
select(Name, Likelihood)
winSummary
library(premPredictor)
suppressMessages(library(tidyverse))
iterations <- 10000
player_info <- "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-18-19.csv"
player_data <- get_player_data(url_value = player_info)
odds_info <- "https://www.dropbox.com/s/cb5qyxyexksvez1/odds.csv"
odds_data <- get_odds_data(url_value = odds_info)
get_latest_standings(data_input = player_data, use_saved_data = T, data_file = 'data/201819_penultimate.rds')
project_players <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = TRUE,
use_saved_data = T,
data_file = "data/201819_penultimate.rds",
runs = iterations)
winPlayer <- as.data.frame(project_players==1L)
winLikelihood <- as.data.frame(
apply(winPlayer, 2, sum)
)
winSummary <- tibble(
Name = colnames(project_players),
Frequency = pull(winLikelihood, 1)) %>%
filter(Frequency > 0) %>%
arrange(-Frequency) %>%
mutate(Likelihood = Frequency/iterations) %>%
select(Name, Likelihood)
winSummary
project_team <- get_projection(
url_odds = odds_info,
url_predictions = player_info,
project_players = FALSE,
use_saved_data = T,
data_file = "data/201819_penultimate.rds",
runs = iterations)
project_team %>%
select(Liverpool, `Man City`) %>%
count(Liverpool, `Man City`) %>%
mutate(chance = n / sum(n)) %>%
arrange(desc(chance))
bind_cols(winPlayer, project_team) %>%
select(Roger = Roger.Gathercole, Luke = Luke.Finnis, `Man City`, Liverpool) %>%
count(Roger, Luke, `Man City`, Liverpool) %>%
mutate(chance = n / sum(n)) %>%
arrange(`Man City`, desc(chance))
library(tidyverse)        # Does most of what you need
library(xml2)             # Scrapes web data
library(htmlwidgets)      # For responsive exhibits
library(widgetframe)      # For responsive exhibits
library(DT)               # For responsive data tables
library(leaflet)          # For interactive map plots
library(maptools)         # For maps
library(sp)               # For map-like data
# webResults <- read_html("https://ig.ft.com/sites/elections/2016/uk/eu-referendum/")
# webData <- webResults %>%
#   html_nodes("td:nth-child(1) , .area-state-3 .hideable") %>%
#   html_text()
# saveRDS(webData, "webData.rds")
webData <- readRDS("data/webData.rds")
head(webData)
data_20190810 <- premPredictor::get_latest_standings()
data_20190810 <- premPredictor::get_latest_EPL_table()
premPredictor::get_latest_standings(data_input = data_20190810)
x <- premPredictor::get_player_data('https://www.dropbox.com/s/rr0qdtrhn4n4h9i/PremPredict-19-20-blank-emails.csv')
get_latest_standings(data_input = x)
premPredictor::get_latest_standings(data_input = x)
data_20190810 <- premPredictor::get_player_data('https://www.dropbox.com/s/rr0qdtrhn4n4h9i/PremPredict-19-20-blank-emails.csv')
rm(x)
suppressMessages(library(tidyverse))
suppressMessages(library(tidyverse))
library(premPredictor)
library(htmlwidgets)
library(widgetframe)
library(DT)
library(ggridges)
player_data <- get_player_data('https://www.dropbox.com/s/rr0qdtrhn4n4h9i/PremPredict-19-20-blank-emails.csv')
premPredictor::get_latest_standings(data_input = player_data)
suppressMessages(library(tidyverse))
library(premPredictor)
library(htmlwidgets)
library(widgetframe)
library(DT)
library(ggridges)
player_data <- get_player_data('https://www.dropbox.com/s/rr0qdtrhn4n4h9i/PremPredict-19-20-blank-emails.csv')
as.data.frame(get_latest_standings(data_input = player_data))
suppressMessages(library(tidyverse))
library(premPredictor)
library(htmlwidgets)
library(widgetframe)
library(DT)
library(ggridges)
player_data <- get_player_data('https://www.dropbox.com/s/rr0qdtrhn4n4h9i/PremPredict-19-20-blank-emails.csv')
print(get_latest_standings(data_input = player_data))
Z <- premPredictor::get_latest_EPL_table()
write_rds(x = Z, path = "data/201920_week1.rds")
library(premPredictor)
suppressMessages(library(tidyverse))
player_info <-
'https://www.dropbox.com/s/rr0qdtrhn4n4h9i/PremPredict-19-20-blank-emails.csv'
player_data <- get_player_data(url_value = player_info)
get_latest_standings(
data_input = player_data,
use_saved_data = T,
data_file = 'data/201819_week1.rds'
)
write_rds(x = player_data, path = 'data_input_2019-20.rds')
library(premPredictor)
suppressMessages(library(tidyverse))
player_data <- read_rds('data/data_input_2019-20.rds')
get_latest_standings(
data_input = player_data,
use_saved_data = T,
data_file = 'data/201819_week1.rds'
)
data_input1 <- as_data_frame(player_data)
averageView <- round(rowMeans(data_input1[, -1]), 2)
views <- cbind(data_input1[,1], averageView)
data_input2 <- data_input1 %>%
gather(key = "Player", -Club, value = "Prediction") %>%
left_join(views, by = "Club")
ggplot(
data = data_input2,
mapping = aes(
y = reorder(Club, -averageView),
x = Prediction,
fill = averageView,
color = averageView
)
) +
geom_ridgeline(
stat = "binline",
bins = 20, scale = 0.95,
draw_baseline = FALSE
) +
scale_x_continuous(
breaks = c(5, 10, 15, 20),
labels = c(5, 10, 15, 20)
) +
labs(
y = "", x = "",
title = "\n Our collective predictions for this season \n"
) +
scale_fill_gradient(
low = "green", high = "red",
guide=FALSE
) +
scale_color_gradient(
low = "green", high = "red",
guide=FALSE
) +
theme(
title = element_text(size = 10),
axis.text.y = element_text(size = 6)
)
library(premPredictor)
x <- get_latest_EPL_table()
library(tidyverse)
write_rds(x = x, path = '201920_week1.rds')
library(premPredictor)
suppressMessages(library(tidyverse))
# player_info <-
#   "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-19-20.csv"
# player_data <- get_player_data(url_value = player_info)
player_data <- read_rds('data/data_input_2019-20.rds')
get_latest_standings(
data_input = player_data,
use_saved_data = T,
data_file = 'data/201819_week1.rds'
)
library(premPredictor)
suppressMessages(library(tidyverse))
# player_info <-
#   "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-19-20.csv"
# player_data <- get_player_data(url_value = player_info)
player_data <- read_rds('data/data_input_2019-20.rds')
get_latest_standings(
data_input = player_data,
use_saved_data = T,
data_file = 'data/201920_week1.rds'
)
library(premPredictor)
suppressMessages(library(tidyverse))
# player_info <-
#   "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-19-20.csv"
# player_data <- get_player_data(url_value = player_info)
player_data <- read_rds('data/data_input_2019-20.rds')
get_latest_standings(
data_input = player_data,
use_saved_data = T,
data_file = 'data/201920_week1.rds'
)
data_input1 <- as_data_frame(player_data)
averageView <- round(rowMeans(data_input1[, -1]), 2)
views <- cbind(data_input1[,1], averageView)
data_input2 <- data_input1 %>%
gather(key = "Player", -Club, value = "Prediction") %>%
left_join(views, by = "Club")
ggplot(
data = data_input2,
mapping = aes(
y = reorder(Club, -averageView),
x = Prediction,
fill = averageView,
color = averageView
)
) +
geom_ridgeline(
stat = "binline",
bins = 20, scale = 0.95,
draw_baseline = FALSE
) +
scale_x_continuous(
breaks = c(5, 10, 15, 20),
labels = c(5, 10, 15, 20)
) +
labs(
y = "", x = "",
title = "\n Our collective predictions for this season \n"
) +
scale_fill_gradient(
low = "green", high = "red",
guide=FALSE
) +
scale_color_gradient(
low = "green", high = "red",
guide=FALSE
) +
theme(
title = element_text(size = 10),
axis.text.y = element_text(size = 6)
)
library(ggridges)
library(premPredictor)
suppressMessages(library(tidyverse))
# player_info <-
#   "https://www.dropbox.com/s/uin6zk4w5cyk2m1/PremPredict-19-20.csv"
# player_data <- get_player_data(url_value = player_info)
player_data <- read_rds('data/data_input_2019-20.rds')
get_latest_standings(
data_input = player_data,
use_saved_data = T,
data_file = 'data/201920_week1.rds'
)
data_input1 <- as_data_frame(player_data)
averageView <- round(rowMeans(data_input1[, -1]), 2)
views <- cbind(data_input1[,1], averageView)
data_input2 <- data_input1 %>%
gather(key = "Player", -Club, value = "Prediction") %>%
left_join(views, by = "Club")
ggplot(
data = data_input2,
mapping = aes(
y = reorder(Club, -averageView),
x = Prediction,
fill = averageView,
color = averageView
)
) +
geom_ridgeline(
stat = "binline",
bins = 20, scale = 0.95,
draw_baseline = FALSE
) +
scale_x_continuous(
breaks = c(5, 10, 15, 20),
labels = c(5, 10, 15, 20)
) +
labs(
y = "", x = "",
title = "\n Our collective predictions for this season \n"
) +
scale_fill_gradient(
low = "green", high = "red",
guide=FALSE
) +
scale_color_gradient(
low = "green", high = "red",
guide=FALSE
) +
theme(
title = element_text(size = 10),
axis.text.y = element_text(size = 6)
)
devtools::install_github("rstudio/learnr#271")
install.packages("distill")
install.packages(c("htmltools", "htmlwidgets", "promises", "RcppArmadillo", "rmarkdown", "shiny", "tidymodels"))
install.packages(c("htmltools", "htmlwidgets", "promises", "RcppArmadillo", "rmarkdown", "shiny", "tidymodels"))
install.packages(c("htmltools", "htmlwidgets", "promises", "RcppArmadillo", "rmarkdown", "shiny", "tidymodels"))
